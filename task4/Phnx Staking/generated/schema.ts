// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BaseInterestUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_newRate", Value.fromBigInt(BigInt.zero()));
    this.set("_oldRate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BaseInterestUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BaseInterestUpdated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BaseInterestUpdated", id.toString(), this);
    }
  }

  static load(id: string): BaseInterestUpdated | null {
    return changetype<BaseInterestUpdated | null>(
      store.get("BaseInterestUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _newRate(): BigInt {
    let value = this.get("_newRate");
    return value!.toBigInt();
  }

  set _newRate(value: BigInt) {
    this.set("_newRate", Value.fromBigInt(value));
  }

  get _oldRate(): BigInt {
    let value = this.get("_oldRate");
    return value!.toBigInt();
  }

  set _oldRate(value: BigInt) {
    this.set("_oldRate", Value.fromBigInt(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previousOwner", Value.fromBytes(Bytes.empty()));
    this.set("newOwner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OwnershipTransferred entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class Paused extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Paused entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Paused entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Paused", id.toString(), this);
    }
  }

  static load(id: string): Paused | null {
    return changetype<Paused | null>(store.get("Paused", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}

export class StakeCompleted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("altQuantity", Value.fromBigInt(BigInt.zero()));
    this.set("initiationTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("durationTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("rewardAmount", Value.fromBigInt(BigInt.zero()));
    this.set("staker", Value.fromBytes(Bytes.empty()));
    this.set("phnxContractAddress", Value.fromBytes(Bytes.empty()));
    this.set("portalAddress", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeCompleted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StakeCompleted entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StakeCompleted", id.toString(), this);
    }
  }

  static load(id: string): StakeCompleted | null {
    return changetype<StakeCompleted | null>(store.get("StakeCompleted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get altQuantity(): BigInt {
    let value = this.get("altQuantity");
    return value!.toBigInt();
  }

  set altQuantity(value: BigInt) {
    this.set("altQuantity", Value.fromBigInt(value));
  }

  get initiationTimestamp(): BigInt {
    let value = this.get("initiationTimestamp");
    return value!.toBigInt();
  }

  set initiationTimestamp(value: BigInt) {
    this.set("initiationTimestamp", Value.fromBigInt(value));
  }

  get durationTimestamp(): BigInt {
    let value = this.get("durationTimestamp");
    return value!.toBigInt();
  }

  set durationTimestamp(value: BigInt) {
    this.set("durationTimestamp", Value.fromBigInt(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    return value!.toBigInt();
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value!.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get phnxContractAddress(): Bytes {
    let value = this.get("phnxContractAddress");
    return value!.toBytes();
  }

  set phnxContractAddress(value: Bytes) {
    this.set("phnxContractAddress", Value.fromBytes(value));
  }

  get portalAddress(): Bytes {
    let value = this.get("portalAddress");
    return value!.toBytes();
  }

  set portalAddress(value: Bytes) {
    this.set("portalAddress", Value.fromBytes(value));
  }
}

export class Unpaused extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unpaused entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Unpaused entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Unpaused", id.toString(), this);
    }
  }

  static load(id: string): Unpaused | null {
    return changetype<Unpaused | null>(store.get("Unpaused", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}

export class Unstake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("staker", Value.fromBytes(Bytes.empty()));
    this.set("stakedToken", Value.fromBytes(Bytes.empty()));
    this.set("portalAddress", Value.fromBytes(Bytes.empty()));
    this.set("altQuantity", Value.fromBigInt(BigInt.zero()));
    this.set("durationTimestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unstake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Unstake entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Unstake", id.toString(), this);
    }
  }

  static load(id: string): Unstake | null {
    return changetype<Unstake | null>(store.get("Unstake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value!.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get stakedToken(): Bytes {
    let value = this.get("stakedToken");
    return value!.toBytes();
  }

  set stakedToken(value: Bytes) {
    this.set("stakedToken", Value.fromBytes(value));
  }

  get portalAddress(): Bytes {
    let value = this.get("portalAddress");
    return value!.toBytes();
  }

  set portalAddress(value: Bytes) {
    this.set("portalAddress", Value.fromBytes(value));
  }

  get altQuantity(): BigInt {
    let value = this.get("altQuantity");
    return value!.toBigInt();
  }

  set altQuantity(value: BigInt) {
    this.set("altQuantity", Value.fromBigInt(value));
  }

  get durationTimestamp(): BigInt {
    let value = this.get("durationTimestamp");
    return value!.toBigInt();
  }

  set durationTimestamp(value: BigInt) {
    this.set("durationTimestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("stakedAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakedAmount(): BigInt {
    let value = this.get("stakedAmount");
    return value!.toBigInt();
  }

  set stakedAmount(value: BigInt) {
    this.set("stakedAmount", Value.fromBigInt(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("timeStamp", Value.fromBigInt(BigInt.zero()));
    this.set("txHash", Value.fromString(""));
    this.set("blockNo", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timeStamp(): BigInt {
    let value = this.get("timeStamp");
    return value!.toBigInt();
  }

  set timeStamp(value: BigInt) {
    this.set("timeStamp", Value.fromBigInt(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get blockNo(): BigInt {
    let value = this.get("blockNo");
    return value!.toBigInt();
  }

  set blockNo(value: BigInt) {
    this.set("blockNo", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class ContractDetail extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("stakedAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalRewardDistributed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContractDetail entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ContractDetail entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ContractDetail", id.toString(), this);
    }
  }

  static load(id: string): ContractDetail | null {
    return changetype<ContractDetail | null>(store.get("ContractDetail", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakedAmount(): BigInt {
    let value = this.get("stakedAmount");
    return value!.toBigInt();
  }

  set stakedAmount(value: BigInt) {
    this.set("stakedAmount", Value.fromBigInt(value));
  }

  get totalRewardDistributed(): BigInt {
    let value = this.get("totalRewardDistributed");
    return value!.toBigInt();
  }

  set totalRewardDistributed(value: BigInt) {
    this.set("totalRewardDistributed", Value.fromBigInt(value));
  }
}
